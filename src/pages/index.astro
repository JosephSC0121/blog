---
import Layout from "../components/layout.astro";
import ExerciseListing from "../components/exercise/exercise-list.astro";
import { exercises } from "../helpers";
---

<Layout>
    <div class="max-w-screen-xl mx-auto px-4 py-12 sm:px-8">
        <h2 class="text-4xl font-bold m-6">¿Qué es este sitio web?</h2>
        <p class="text-xl m-6">
            Este sitio web es una colección de mis soluciones a una variedad de
            problemas de programación, incluyendo los ejercicios de <a
                class="text-xl text-primary"
                href="https://projecteuler.net/"
            >
                Project Euler</a
            >. Aquí compartiré mi enfoque tanto matemático como programático
            para cada ejercicio.
        </p>
        <h2 class="text-4xl font-bold m-6">¿Por qué estoy haciendo esto?</h2>
        <p class="text-xl m-6">
            Me apasionan las matemáticas, la programación y la resolución de problemas.
            Este sitio es un espacio donde puedo compartir mis soluciones a una
            variedad de desafíos de programación. Además, considero que la técnica de
            Feynman es una herramienta excelente para aprender. Al mostrar de la mejor
            forma posible mis soluciones a los ejercicios, estaré aprendiendo y
            mejorando mis habilidades.
        </p>
        <p class="text-xl m-6">
            No conozco muchos sitios que ofrezcan este tipo de recursos en español,
            así que me gustaría ofrecer una ayuda más para aquellos que, como yo,
            sienten curiosidad por estos problemas.
            
        </p>
        <h2 class="text-4xl font-bold m-6">Sobre mí</h2>
        <p class="text-xl m-6">
            Mi nombre es Joseph, soy Ingeniero de Sistemas y estudiante de
            Matemáticas. Si quieres saber más sobre mí, visita mi <a
                class="text-xl text-primary"
                href="https://joseph.mariailabs.com/">sitio personal</a
            >.
        </p>
        <h2 class="text-4xl font-bold m-6">Ejercicios</h2>
        <ExerciseListing exercises={exercises} />
    </div>

    <div>
        <script>
            var Example = Example || {};

Example.newtonsCradle = function() {
    var Engine = Matter.Engine,
        Render = Matter.Render,
        Runner = Matter.Runner,
        Body = Matter.Body,
        Composites = Matter.Composites,
        MouseConstraint = Matter.MouseConstraint,
        Mouse = Matter.Mouse,
        Composite = Matter.Composite;

    // Create engine
    var engine = Engine.create(),
        world = engine.world;

    // Create render
    var render = Render.create({
        element: document.getElementById('newtonsCradleDiv'),
        engine: engine,
        options: {
            width: 800,
            height: 600,
            showVelocity: true
        }
    });

    Render.run(render);

    // Create runner
    var runner = Runner.create();
    Runner.run(runner, engine);

    // Create Newton's Cradle structure
    var cradle = Example.newtonsCradle.newtonsCradle(100, 100, 5, 30, 200);
    Composite.add(world, cradle);
    Body.translate(cradle.bodies[0], { x: -180, y: -100 });

    // Mouse control
    var mouse = Mouse.create(render.canvas),
        mouseConstraint = MouseConstraint.create(engine, {
            mouse: mouse,
            constraint: {
                stiffness: 0.2,
                render: {
                    visible: false
                }
            }
        });

    Composite.add(world, mouseConstraint);

    // Sync mouse with rendering
    render.mouse = mouse;

    // Adjust render view
    Render.lookAt(render, {
        min: { x: 0, y: 50 },
        max: { x: 400, y: 600 }
    });
};

// Function to create Newton's Cradle
Example.newtonsCradle.newtonsCradle = function(xx, yy, number, size, length) {
    var Composite = Matter.Composite,
        Constraint = Matter.Constraint,
        Bodies = Matter.Bodies;

    var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });

    for (var i = 0; i < number; i++) {
        var separation = 1.9,
            circle = Bodies.circle(xx + i * (size * separation), yy + length, size, 
                { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0, slop: size * 0.02 }),
            constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });

        Composite.addBody(newtonsCradle, circle);
        Composite.addConstraint(newtonsCradle, constraint);
    }

    return newtonsCradle;
};

        </script>
    </div>
</Layout>
